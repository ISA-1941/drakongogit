// Autogenerated with DRAKON Editor 1.31

package main

import (
	"errors"
	"fmt"
)

var fBool bool = false

type Tree struct {
	root *node
}

func New() *Tree {
	return &Tree{}
}


func (tree *Tree) Find(val int) *node {
	// as always, search from the root
	return findNode(tree.root, val)
}

func (tree *Tree) Traverse() {
	// traverse from the root
	traverse(tree.root)
}

var (
	ErrDuplicatedNode error = errors.New("bst: found duplicated value on tree")
	ErrNodeNotFound   error = errors.New("bst: node not found")
)

type node struct {
	height, value int
	left, right   *node
}

func (n *node) bF() int {
	if n == nil {
		return 0
	}

	return n.left.Height() - n.right.Height()
}

func (n *node) updateHeight() {
	max := func(a, b int) int {
		if a > b {
			return a
		}

		return b
	}
	n.height = max(n.left.Height(), n.right.Height()) + 1
}

func (n *node) Height() int {
	if n == nil {
		return 0
	}

	return n.height
}

func (n *node) Value() int {
	return n.value
}

func (n *node) Left() *node {
	return n.left
}

func (n *node) Right() *node {
	return n.right
}

func newNode(val int) *node {
	return &node{
		height: 1,
		value:  val,
		left:   nil,
		right:  nil,
	}
}


func rightRotate(x *node) *node {
	y := x.left
	t := y.right

	y.right = x
	x.left = t

	x.updateHeight()
	y.updateHeight()

	return y
}

func leftRotate(x *node) *node {
	y := x.right
	t := y.left

	y.left = x
	x.right = t

	x.updateHeight()
	y.updateHeight()

	return y
}

func greatest(node *node) *node {
	if node == nil {
		return nil
	}

	if node.right == nil {
		return node
	}

	return greatest(node.right)
}

func traverse(node *node) {
	// exit condition
	if node == nil {
		return
	}

	fmt.Println(node.value)
	traverse(node.left)
	traverse(node.right)
}



func  (t *Tree) inOrder(node *node)  {
    // item 483
    if node != nil {
        // item 486
        t.inOrder(node.left)
        // item 485
        fmt.Print("  ", node.value)
        // item 487
        t.inOrder(node.right)
    } else {
        
    }
}

func  (t *Tree) postOrder(node *node)  {
    // item 494
    if node != nil {
        // item 498
        t.postOrder(node.left)
        // item 499
        t.postOrder(node.right)
        // item 497
        fmt.Print("  ", node.value)
    } else {
        
    }
}

func  (t *Tree) preOrder(node *node)  {
    // item 505
    if node != nil {
        // item 508
        fmt.Print("  ", node.value)
        // item 509
        t.preOrder(node.left)
        // item 510
        t.preOrder(node.right)
    } else {
        
    }
}

func  (tree *Tree) Insert(val int) error {
    // item 32
    root, err := 
    insertNode(tree.root, val)
    // item 33
    if err != nil {
        // item 36
        return err
    } else {
        
    }
    // item 37
    tree.root = root
    // item 38
    return nil
}

func  (tree *Tree) Remove(val int) error {
    // item 254
    root, err := 
    removeNode(tree.root, val)
    // item 255
    if err != nil {
        // item 258
        return err
    } else {
        
    }
    // item 259
    tree.root = root
    // item 260
    return nil
}

func  findNode(node *node, val int) *node {
    // item 791
    if node == nil {
        // item 793
        return nil
    } else {
        
    }
    // item 795
    if node.value == val {
        // item 797
        fBool = true
        // item 794
        return node
    } else {
        
    }
    // item 806
    if val > node.value {
        // item 803
        return findNode(node.right, val)
    } else {
        
    }
    // item 809
    if val < node.value {
        // item 804
        return findNode(node.left, val)
    } else {
        
    }
    // item 805
    return nil
}

func  findNode_Select(node *node, val int) *node {
    // item 9160001
    if node == nil {
        // item 932
        return nil
    } else {
        // item 9160002
        if node.value == val {
            // item 937
            fBool = true
            // item 933
            return node
        } else {
            // item 9160003
            if val > node.value {
                // item 935
                return 
                findNode(node.right, val)
            } else {
                // item 9160004
                if val < node.value {
                    
                } else {
                    // item 9160005
                    panic("Not expected condition.")
                }
                // item 936
                return 
                findNode(node.left, val)
            }
        }
    }
}

func  insertNode(node *node, val int) (*node, error) {
    // item 736
    if node == nil {
        // item 739
        return newNode(val), nil
    } else {
        
    }
    // item 740
    if node.value == val {
        // item 735
        return nil, ErrDuplicatedNode
    } else {
        
    }
    // item 754
    if  val > node.value {
        // item 748
        right, err := 
        insertNode(node.right, val)
        // item 749
        if err != nil {
            // item 752
            return nil, err
        } else {
            
        }
        // item 753
        node.right = right
    } else {
        
    }
    // item 765
    if val < node.value {
        // item 758
        left, err := 
        insertNode(node.left, val)
        // item 759
        if err != nil {
            // item 761
            return nil, err
        } else {
            
        }
        // item 762
        node.left = left
    } else {
        
    }
    // item 764
    return rotateInsert(node, val), nil
}

func  insertNode_Eng(node *node, val int) (*node, error) {
    // item 826
    if node == nil {
        // item 829
        return newNode(val), nil
    } else {
        
    }
    // item 830
    if node.value == val {
        // item 825
        return nil, ErrDuplicatedNode
    } else {
        
    }
    // item 843
    if  val > node.value {
        // item 837
        right, err := 
        insertNode(node.right, val)
        // item 838
        if err != nil {
            // item 841
            return nil, err
        } else {
            
        }
        // item 842
        node.right = right
    } else {
        
    }
    // item 853
    if val < node.value {
        // item 846
        left, err := 
        insertNode(node.left, val)
        // item 847
        if err != nil {
            // item 849
            return nil, err
        } else {
            
        }
        // item 850
        node.left = left
    } else {
        
    }
    // item 852
    return rotateInsert(node, val), nil
}

func  main()  {
    // item 13
    tree := New()
    // item 12
    values := []int {21,17,16,11,9,7,5,3}
    //var number int
    // item 140001
    i := 0;
    for {
        // item 140002
        if i < len(values) {
            
        } else {
            break
        }
        // item 16
        tree.Insert(values[i])
        // item 140003
        i++;
    }
    // item 521
    fmt.Println()
    fmt.Println("Обход дерева до удаления: ")
    fmt.Println("preOrder, inOrder, postOrder")
    tree.preOrder(tree.root)
    fmt.Println()
    tree.inOrder(tree.root)
    fmt.Println()
    tree.postOrder(tree.root)
    fmt.Println()
    num := 3
    tree.Find(num)
    // item 517
    if fBool == true {
        // item 515
        fmt.Println("\n число ", num, 
        "присутствует")
    } else {
        // item 516
        fmt.Println("\n Число ", num, 
        "отсутствует")
    }
    // item 525
    numR := 7
    tree.Remove(numR)
    fmt.Println("Удаление узла ", numR)
    fmt.Println("Обход дерева после удаления числа ", numR)
    fmt.Println("preOrder, inOrder, postOrder")
    tree.preOrder(tree.root)
    fmt.Println()
    tree.inOrder(tree.root)
    fmt.Println()
    tree.postOrder(tree.root)
    fmt.Println()
}

func  removeNode(node *node, val int) (*node, error) {
    // item 606
    if node == nil {
        // item 607
        return nil, ErrNodeNotFound
    } else {
        
    }
    // item 610
    if val != node.value {
        // item 613
        if val > node.value {
            // item 616
            right, err := 
            removeNode(node.right, val)
            // item 617
            if err != nil {
                // item 618
                return nil, err
            } else {
                
            }
            // item 619
            node.right = right
        } else {
            // item 622
            left, err := 
            removeNode(node.left, val)
            // item 623
            if err != nil {
                // item 625
                return nil, err
            } else {
                
            }
            // item 626
            node.left = left
        }
    } else {
        // item 6310001
        if node.left != nil && 
node.right != nil {
            // item 636
            successor := greatest(node.left)
            value := successor.value
            // item 637
            left, err := 
            removeNode(node.left, value)
            // item 638
            if err != nil {
                // item 640
                return nil, err
            } else {
                
            }
            // item 653
            node.left = left
            // item 641
            node.value = value
        } else {
            // item 6310002
            if node.left != nil || 
node.right != nil {
                // item 644
                if node.left != nil {
                    // item 646
                    node = node.left
                } else {
                    // item 647
                    node = node.right
                }
            } else {
                // item 6310003
                if node.left == nil && 
node.right == nil {
                    
                } else {
                    // item 6310004
                    panic("Not expected condition.")
                }
                // item 648
                node = nil // Why
            }
        }
    }
    // item 658
    if node == nil {
        // item 661
        return nil,nil
    } else {
        
    }
    // item 662
    return rotateDelete(node), nil
}

func  removeNode_Eng(node *node, val int) (*node, error) {
    // item 943
    if node == nil {
        // item 944
        return nil, ErrNodeNotFound
    } else {
        
    }
    // item 947
    if val != node.value {
        // item 950
        if val > node.value {
            // item 953
            right, err := 
            removeNode(node.right, val)
            // item 954
            if err != nil {
                // item 955
                return nil, err
            } else {
                
            }
            // item 956
            node.right = right
        } else {
            // item 959
            left, err := 
            removeNode(node.left, val)
            // item 960
            if err != nil {
                // item 962
                return nil, err
            } else {
                
            }
            // item 963
            node.left = left
        }
    } else {
        // item 9650001
        if node.left != nil && 
node.right != nil {
            // item 970
            successor := greatest(node.left)
            value := successor.value
            // item 971
            left, err := 
            removeNode(node.left, value)
            // item 972
            if err != nil {
                // item 974
                return nil, err
            } else {
                
            }
            // item 986
            node.left = left
            // item 975
            node.value = value
        } else {
            // item 9650002
            if node.left != nil || 
node.right != nil {
                // item 978
                if node.left != nil {
                    // item 980
                    node = node.left
                } else {
                    // item 981
                    node = node.right
                }
            } else {
                // item 9650003
                if node.left == nil && 
node.right == nil {
                    
                } else {
                    // item 9650004
                    panic("Not expected condition.")
                }
                // item 982
                node = nil // Why
            }
        }
    }
    // item 987
    if node == nil {
        // item 990
        return nil,nil
    } else {
        
    }
    // item 991
    return rotateDelete(node), nil
}

func  rotateDelete(node *node) *node {
    // item 698
    node.updateHeight()
    // item 699
    bF:= node.bF()
    // item 700
    if bF > 1 && 
node.left.bF() >= 0 {
        // item 703
        return rightRotate(node)
    } else {
        
    }
    // item 704
    if bF > 1 && 
node.left.bF() < 0 {
        // item 707
        node.left = 
        leftRotate(node.left)
        // item 706
        return rightRotate(node)
    } else {
        
    }
    // item 711
    if bF < -1 && 
node.right.bF() <= 0 {
        // item 714
        return leftRotate(node)
    } else {
        
    }
    // item 715
    if bF < -1 && 
node.right.bF() > 0 {
        // item 718
        node.right = 
        rightRotate(node.right)
        // item 719
        return leftRotate(node)
    } else {
        
    }
    // item 710
    return node
}

func  rotateInsert(node *node, val int) *node {
    // item 457
    node.updateHeight()
    // item 458
    bF:= node.bF()
    //fmt.Println("rI: val =", val, 
    //"bF = ", bF)
    // item 459
    if bF > 1 &&
 val < node.left.value {
        // item 462
        return rightRotate(node)
    } else {
        
    }
    // item 463
    if bF < -1 &&
val > node.right.value {
        // item 466
        return leftRotate(node)
    } else {
        
    }
    // item 467
    if bF > 1 && 
val > node.left.value {
        // item 889
        node.left = 
        leftRotate(node.left)
        // item 888
        return rightRotate(node)
    } else {
        
    }
    // item 472
    if bF < -1 && 
val < node.right.value {
        // item 475
        node.right = 
        rightRotate(node.right)
        // item 476
        return leftRotate(node)
    } else {
        
    }
    // item 477
    return node
}

func  rotateInsert_Select(node *node, val int) *node {
    // item 871
    node.updateHeight()
    // item 872
    bF:= node.bF()
    // item 8740001
    if bF > 1 &&
 val < node.left.value {
        // item 884
        return rightRotate(node)
    } else {
        // item 8740002
        if bF < -1 &&
val > node.right.value {
            // item 885
            return leftRotate(node)
        } else {
            // item 8740003
            if bF > 1 && 
val > node.left.value {
                // item 887
                node.left = 
                leftRotate(node.left)
                // item 886
                return rightRotate(node)
            } else {
                // item 8740004
                if bF < -1 && 
val < node.right.value {
                    
                } else {
                    // item 8740005
                    panic("Not expected condition.")
                }
                // item 890
                node.right = 
                rightRotate(node.right)
                // item 891
                return leftRotate(node)
            }
        }
    }
    // item 892
    return node
}


