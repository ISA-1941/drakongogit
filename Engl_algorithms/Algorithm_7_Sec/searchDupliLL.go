// Autogenerated with DRAKON Editor 1.31

package main

import "fmt"

type Node struct {
	data string
	nextNode *Node
}
type LinkedList struct {
	len      int
	headNode *Node 
	n int // number of repetitions
}



func  (ll *LinkedList) iterateList() *Node {
    // item 135
    var node *Node
    // item 1360001
    node = ll.headNode;
    for {
        // item 1360002
        if node != nil {
            
        } else {
            break
        }
        // item 138
        fmt.Println(node.data)
        // item 1360003
        node = node.nextNode;
    }
    // item 182
    return node
}

func  (ll *LinkedList) nodeWithVal(nodeVal string) *Node {
    // item 173
    var node, nodeWith *Node
    fmt.Println("NodeWith > ", nodeVal)
    // item 1740001
    node = ll.headNode;
    for {
        // item 1740002
        if node != nil {
            
        } else {
            break
        }
        // item 176
        if node.data == nodeVal {
            // item 179
            nodeWith = node
            // item 180
            break
        } else {
            
        }
        // item 1740003
        node = node.nextNode;
    }
    // item 181
    return nodeWith
}

func  (ll *LinkedList) pushBack(val string)  {
    // item 123
    node := ll.headNode
    newNode := &Node{data: val, 
    nextNode: nil}
    // item 124
    if node == nil {
        // item 157
        return
    } else {
        
    }
    for {
        // item 221
        if node.nextNode != nil {
            
        } else {
            break
        }
        // item 223
        node = node.nextNode
    }
    // item 131
    node.nextNode = newNode
}

func  (ll *LinkedList) pushFront(val string)  {
    // item 160
    var node = &Node{data: val, nextNode: nil}
    // item 161
    if ll.headNode != nil {
        // item 164
        node.nextNode = ll.headNode
    } else {
        
    }
    // item 165
    ll.headNode = node
    // item 166
    ll.len++
}

func  (ll *LinkedList) pushVal(nodeVal string, val string)  {
    // item 230
    var node = &Node{data:
     val, nextNode: nil}
    // item 231
    var nodeWith *Node
    // item 232
    nodeWith = ll.nodeWithVal(nodeVal)
    // item 233
    if nodeWith != nil {
        // item 236
        node.nextNode = nodeWith.nextNode
        nodeWith.nextNode = node
    } else {
        
    }
    // item 237
    ll.len++
}

func  (ll *LinkedList) removeDupli(val string) *Node {
    // item 270
    node := ll.headNode
    for {
        // item 278
        if node != nil && node.data == val {
            
        } else {
            break
        }
        // item 271
        ll.headNode =
         node.nextNode
        // item 281
        node = ll.headNode
    }
    // item 287
    fmt.Println("ll.n = ", ll.n)
    for {
        // item 282
        if node != nil {
            
        } else {
            break
        }
        // item 272
        nextNode := node.nextNode
        // item 273
        if nextNode != nil && 
nextNode.data == val &&
ll.n > 1 {
            // item 274
            node.nextNode =
            nextNode.nextNode
        } else {
            // item 275
            node = nextNode
        }
    }
    // item 288
    ll.pushBack("Shafler B.")
    // item 276
    return node
}

func  (ll *LinkedList) removeVal(val string) *Node {
    // item 197
    node := ll.headNode
    for {
        // item 212
        if node != nil && node.data == val {
            
        } else {
            break
        }
        // item 200
        ll.headNode =
         node.nextNode
        // item 215
        node = ll.headNode
    }
    for {
        // item 216
        if node != nil {
            
        } else {
            break
        }
        // item 203
        nextNode := node.nextNode
        // item 204
        if nextNode != nil && 
nextNode.data == val {
            // item 207
            node.nextNode =
            nextNode.nextNode
        } else {
            // item 208
            node = nextNode
        }
    }
    // item 209
    return node
}

func  (ll *LinkedList) searchData(val string)  {
    // item 243
    var node *Node
    // item 2440001
    node = ll.headNode;
    for {
        // item 2440002
        if node != nil {
            
        } else {
            break
        }
        // item 246
        if node.data ==  val {
            // item 249
            ll.n++
        } else {
            
        }
        // item 2440003
        node = node.nextNode;
    }
    // item 250
    if ll.n != 0 {
        // item 254
        fmt.Println("Desire value ", val, 
        "occurs ", ll.n, "times")
    } else {
        // item 253
        fmt.Println("Desire value ", val, 
        "is absent")
    }
    // item 255
    return
}

func  main()  {
    // item 259
    var ll LinkedList = LinkedList{}
    	ll.pushFront("Smith A.")
    	ll.pushBack("Shafler B.")
    	ll.pushBack("Shafler B.")
    	ll.pushBack("Shafler B.")
    	ll.pushBack("Wiley D.")
    	ll.pushBack("Brown G.")
    	ll.pushBack("Black H.")
    	ll.iterateList()
    	fmt.Println("-------------------")
    	ll.removeVal("Brown G.")
    	fmt.Println("Record Brown G is deleted")
    	ll.iterateList()
    	fmt.Println("-------------------")
    	ll.pushVal("Wiley D.", "Singer L.")
    	ll.iterateList()
    	fmt.Println("-------------------")
    	ll.searchData("Shafler B.")
    	fmt.Println("-------------------")
    	ll.removeDupli("Shafler B.")
    	fmt.Println("-------------------")
    	ll.iterateList()
}


