// Autogenerated with DRAKON Editor 1.31

package main

import "fmt"

type Node struct {
	data interface{}
	next *Node
}
type Stack struct {
	head *Node
}



func  (s *Stack) peek() interface{} {
    // item 25
    if s.head == nil {
        // item 28
        return nil
    } else {
        
    }
    // item 29
    return s.head.data
}

func  (s *Stack) pop() interface{} {
    // item 12
    if s.head == nil {
        // item 15
        return nil
    } else {
        
    }
    // item 16
    data := s.head.data
    // item 17
    s.head = s.head.next
    // item 18
    return data
}

func  (s *Stack) push(val interface{})  {
    // item 6
    newNode := &Node{data: val, next: s.head}
    s.head = newNode
}

func  main()  {
    // item 33
    stack := &Stack{}
    // item 34
    stack.push("Second")
    stack.push("Third")
    fmt.Println(stack.peek())
    fmt.Println(stack.pop())
    fmt.Println(stack.pop())
    fmt.Println(stack.pop())
    fmt.Println(stack.pop())
}


