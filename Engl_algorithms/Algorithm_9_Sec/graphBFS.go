// Autogenerated with DRAKON Editor 1.31

package main

import "fmt"

type Graph struct {
	nodes map[int][]int
}
var path [] int



func  (graph *Graph) BFS(start int, path [] int)  {
    // item 25
    visited := make(map[int]bool)
    // item 24
    queue := []int{start}
    for {
        // item 26
        if len(queue) > 0 {
            
        } else {
            break
        }
        // item 29
        vertex := queue[0]
        queue = queue[1:]
                // item 30
        if visited[vertex] {
            // item 33
            continue
        } else {
            // item 34
            visited[vertex] = true
            // item 45
            //fmt.Println("-------------------------------------------")
            //fmt.Println("        vertex = ", vertex, "(", visited[vertex], ")", "-->",graph.nodes[vertex])
            path = append(path,vertex)
            fmt.Println(" PATH = ",path)
            for _, neighbor := range graph.nodes[vertex] {
                // item 37
            //    fmt.Println("    neighbor = ", neighbor, "(", visited[neighbor], ")", "queueBefore = ", queue)
                if !visited[neighbor] {
                    // item 40
                    queue = append(queue, neighbor)
            //        fmt.Println("       После проверки -->  queueAfter = ", queue) 
                } else {
                    
                }
            }
        }
    }
}

func  (graph *Graph) addEdge(start, last int)  {
    // item 18
    graph.nodes[start] = append(graph.nodes[start], last)
    graph.nodes[last] = append(graph.nodes[last], start)
}

func  NewGraph() *Graph {
    // item 12
    return &Graph{nodes: make(map[int][]int)}
}

func  main()  {
    // item 5
    graph := NewGraph()
       // item 6
       graph.addEdge(0, 1)
       graph.addEdge(0, 6)
       graph.addEdge(1, 2)
       graph.addEdge(1, 4)
       graph.addEdge(2, 0)
       graph.addEdge(2, 4)
       graph.addEdge(3, 5)
       graph.addEdge(4, 3)
       graph.addEdge(5, 4)
       graph.addEdge(6, 3)

        // item 4
    graph.BFS(2,path)
}


