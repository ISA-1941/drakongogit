// Autogenerated with DRAKON Editor 1.31

package main

import "fmt"

type Graph struct {
	size int
	nodes map[int][]int
}



func  (g *Graph) addEdge(start, last int)  {
    // item 29
    if start >= 0 && start < g.size && 
last >= 0 && last < g.size {
        // item 12
        g.nodes[start] = 
        append(g.nodes[start], last)
    } else {
        // item 32
        fmt.Println("\nError")
    }
}

func  (g *Graph) dfsGraph(start int, visited map[int]bool)  {
    // item 38
        visited[start] = true
        fmt.Printf("%d ", start)
    for _, neighbor := range g.nodes[start] {
        // item 41
        if !visited[neighbor] {
            // item 44
            g.dfs(neighbor, visited)
        } else {
            
        }
    }
}

func  (g *Graph) printAdjacencyList()()  {
    for node, neighbors := range g.nodes {
        // item 18
        fmt.Printf("%d: node = ", node)
        for _, neighbor := range neighbors {
            // item 21
            fmt.Printf("%d ", neighbor)
        }
        // item 22
        fmt.Println()
    }
}

func  NewGraph() *Graph {
    // item 6
    return &Graph{
    nodes: make(map[int][]int),
    }
}

func  main()  {
    // item 26
    graph := NewGraph()
    graph.size = 6
    // item 27
    graph.addEdge(0, 1)
    graph.addEdge(0, 5)
    graph.addEdge(1, 1)
    graph.addEdge(2, 1)
    graph.addEdge(3, 0)
    graph.addEdge(3, 3)
    graph.addEdge(4, 2)
    graph.addEdge(4, 3)
    graph.addEdge(5, 1)
    // item 28
    graph.printAdjacencyList()
    graph.dfsGraph(6, visited)
}


